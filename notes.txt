----------------------------------------------------
HASH		BITS			BYTES
----------------------------------------------------
CRC:
----------------------------------------------------
BSD checksum	16 bits			2
Checksum	32 bits			4
CRC-16		16 bits			2
CRC-32		32 bits			4
CRC-32 MPEG-2	32 bits			4
CRC-64		64 bits			8
SYSV checksum	16 bits			2

----------------------------------------------------
HASH		BITS			BYTES
----------------------------------------------------
CHECKSUMS:
----------------------------------------------------
sum (Unix)	16 or 32 bits		2 or 4
sum8		8 bits			1
sum16		16 bits			2
sum24		24 bits			3
sum32		32 bits			4
fletcher-4	4 bits			.5
fletcher-8	8 bits			1
fletcher-16	16 bits			2
fletcher-32	32 bits			4
Adler-32	32 bits			4
xor8		8 bits			1

----------------------------------------------------
HASH		BITS			BYTES
----------------------------------------------------
KEYED CRYPTOGRAPHIC HASH:
----------------------------------------------------
BLAKE2		up to 512 bits		up to 64
Poly1305-AES	128 bits		16	
SipHash		64 bits			8
MD6		512 bits		64

----------------------------------------------------
HASH		BITS			BYTES
----------------------------------------------------
UNKEYED CRYPTOGRAPHIC HASH:
----------------------------------------------------
BLAKE-256	256 bits		32	
BLAKE-512	512 bits		64
BLAKE2s		Up to 256 bits		up to 32
BLAKE2b		Up to 512 bits		up to 64
ECOH		224 to 512 bits		28 to 64
FSB		160 to 512 bits		20 to 64
GOST		256 bits		32
Grøstl		Up to 512 bits		up to 64
HAS-160		160 bits		20	
HAVAL		128 to 256 bits		16 to 32
JH		224 to 512 bits		28 to 64
MD2		128 bits		16
MD4		128 bits		16
MD5		128 bits		16
MD6		Up to 512 bits		up to 64
RadioGatún	Up to 1216 bits		up to 152
RIPEMD		128 bits		16
RIPEMD-128	128 bits		16
RIPEMD-160	160 bits		20
RIPEMD-320	320 bits		40
SHA-1		160 bits		20
SHA-224		224 bits		28
SHA-256		256 bits		32
SHA-384		384 bits		48
SHA-512		512 bits		64
Snefru		128 or 256 bits		16 or 32
Spectral Hash	512 bits		64
Streebog	256 or 512 bits		32 or 64
SWIFFT		512 bits		64
Tiger		192 bits		24
Whirlpool	512 bits		64

EX HASHES:

SHA256	(64 characters in length)	Length: 256 bits, 32 bytes (Hex encoded string. Every two chars represent a character)
----------------------------------------------------------------------------------------------------------------------------
STRING					HASH									ENTROPY
----------------------------------------------------------------------------------------------------------------------------

"hello"					5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03	3.808267877819773
"goodbye"				71573b922a87abc3fd1a957f2cfa09d9e16998567dd878a85e12166112751806	3.7521174396411276
"You are Gay"				341df93c112e4c2631f01921ce977ce343c526a3515c8d7ff8e46717c903b610	3.7976295406163905
"Which is fine, not a homophobe"	322a127551f4cbd06c4113133d74468e7a4ad698b1bbaf8cb32400a8bab3a697	3.8422350558081617

MD5	(32 characters in length)		Length:  128 bits, 16 bytes
-------------------------------------------------------------------------------------------------
STRING					HASH					ENTROPY
-------------------------------------------------------------------------------------------------

"hello"					b1946ac92492d2347c6235b4d2611184	3.4772170014624826
"goodbye"				32d6c11747e03715521007d8c84b5aff	3.765319531114783
"You are Gay"				d55c5ec8ad71d3383bb5cef8863bd36c	3.3636085007312415
"Which is fine, not a homophobe"	e9c7db9b229749d8c170c859e217f172	3.4772170014624826

RSA

MIICXAIBAAKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUpwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQABAoGAFijko56+qGyN8M0RVyaRAXz++xTqHBLh3tx4VgMtrQ+WEgCjhoTwo23KMBAuJGSYnRmoBZM3lMfTKevIkAidPExvYCdm5dYq3XToLkkLv5L2pIIVOFMDG+KESnAFV7l2c+cnzRMW0+b6f8mR1CJzZuxVLL6Q02fvLi55/mbSYxECQQDeAw6fiIQXGukBI4eMZZt4nscy2o12KyYner3VpoeE+Np2q+Z3pvAMd/aNzQ/W9WaI+NRfcxUJrmfPwIGm63ilAkEAxCL5HQb2bQr4ByorcMWm/hEP2MZzROV73yF41hPsRC9m66KrheO9HPTJuo3/9s5p+sqGxOlFL0NDt4SkosjgGwJAFklyR1uZ/wPJjj611cdBcztlPdqoxssQGnh85BzCj/u3WqBpE2vjvyyvyI5kX6zk7S0ljKtt2jny2+00VsBerQJBAJGC1Mg5Oydo5NwD6BiROrPxGo2bpTbu/fhrT8ebHkTz2eplU9VQQSQzY1oZMVX8i1m5WUTLPz2yLJIBQVdXqhMCQBGoiuSoSjafUhV7i1cEGpb88h5NBYZzWXGZ37sJ5QsW+sJyoNde3xH8vdXhzU7eT82D6X/scw9RZz+/6rCJ4p0=


5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03hellothere71573b922a87abc3fd1a957f2cfa09d9e16998567dd878a85e12166112751806

======> after looking for printable characters, look for non-printable ones (hex) <=========

======> encoding can be determined by looking at the character sets being used!!! <=========

======> Look up statndard entropies for hashes and encryption!!!  <=========================


DECODE HEX STRING
>>> import codecs
>>> decode_hex = codecs.getdecoder("hex_codec")
>>> hex_str = "68656c6c6f207468657265"
>>> decoded_str = decode_hex(hex_str)
>>> print(decoded_str)
(b'hello there', 22)
>>> decoded_str = decode_hex(hex_str)[0]
>>> print(decoded_str)
b'hello there'
>>>


>>> import codecs
>>> decode_str = codecs.getdecoder("hex_codec")
>>> encode_str = codecs.getencoder("hex_codec")
>>> hex_str = "68656c6c6f207468657265"
>>> hash_str = "b1946ac92492d2347c6235b4d2611184"
>>> hexified_hash_str = encode_str(hash_str.encode("utf-8"))
>>> print(hexified_hash_str)
(b'6231393436616339323439326432333437633632333562346432363131313834', 32)
>>> dehexified_hash_str = decode_str(hexified_hash_str[0])
>>> print(dehexified_hash_str)
(b'b1946ac92492d2347c6235b4d2611184', 64)

--------------------------------------------------------------------------------------------
BINARY => HEX

binascii.b2a_hex(data)
binascii.hexlify(data)
Return the hexadecimal representation of the binary data. Every byte of data is converted into the corresponding 2-digit hex representation. The returned bytes object is therefore twice as long as the length of data.

--------------------------------------------------------------------------------------------
HEX => HEX STRING
binascii.a2b_hex(hexstr)
binascii.unhexlify(hexstr)
Return the binary data represented by the hexadecimal string hexstr. This function is the inverse of b2a_hex(). hexstr must contain an even number of hexadecimal digits (which can be upper or lower case), otherwise an Error exception is raised.

--------------------------------------------------------------------------------------------
base64.b64decode(s, altchars=None, validate=False)
Decode the Base64 encoded bytes-like object or ASCII string s and return the decoded bytes.

Optional altchars must be a bytes-like object or ASCII string of at least length 2 (additional characters are ignored) which specifies the alternative alphabet used instead of the + and / characters.

A binascii.Error exception is raised if s is incorrectly padded.

If validate is False (the default), characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check. If validate is True, these non-alphabet characters in the input result in a binascii.Error.
